plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id 'nebula.dependency-recommender' version '9.0.2'
    id 'com.diffplug.spotless' version '6.3.0'
    id 'com.adarshr.test-logger' version '3.2.0'
}

dependencyRecommendations {
    propertiesFile file: file('versions.props')
}

group 'org.tisonkun.hlc'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

sourceCompatibility = 17
targetCompatibility = 17

spotless {
    format 'misc', {
        // define the files to apply `misc` to
        target '*.gradle', '*.md', '.gitignore'

        // define the steps to apply to those files
        replaceRegex('TrimMultipleEmptyLines', '^\n\n', '\n')
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
    }

    java {
        importOrder('', 'static ')
        removeUnusedImports()
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
    }
}

dependencies {
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.junit.vintage:junit-vintage-engine'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.assertj:assertj-core'
}

test {
    useJUnitPlatform()
}

task javadocJar(type: Jar) {
    archiveClassifier.set('javadoc')
    from javadoc
    from(rootDir) {
        include 'LICENSE'
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
    from(rootDir) {
        include 'LICENSE'
    }
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            groupId = 'org.tisonkun.hlc'
            artifactId = 'hlc'
            pom {
                name = 'Hybrid Logical Clock'
                description = 'A Hybrid Logical Clock implementation in Java.'
                url = 'https://github.com/tisonkun/hlc'
                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            credentials {
                username project.hasProperty('ossrhUser') ? "$ossrhUser" : ""
                password project.hasProperty('ossrhPassword') ? "$ossrhPassword" : ""
            }
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            url = project.hasProperty('release') ? releasesRepoUrl : snapshotsRepoUrl
        }
    }
}

if (project.hasProperty('release')) {
    signing {
        useGpgCmd()
        sign publishing.publications.mavenJava
    }
}
